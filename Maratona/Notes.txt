default (1)	<algorithm>

template <class RandomAccessIterator>
  void sort (RandomAccessIterator first, RandomAccessIterator last);

custom (2)	

template <class RandomAccessIterator, class Compare>
  void sort (RandomAccessIterator first, RandomAccessIterator last, Compare comp);
  
  
<cstdlib> void qsort (void* base, size_t num, size_t size,
            int (*compar)(const void*,const void*));
<0	The element pointed by p1 goes before the element pointed by p2
0	The element pointed by p1 is equivalent to the element pointed by p2
>0	The element pointed by p1 goes after the element pointed by p2


<set>// std::set && std::multiset uses  bidirectional iterator
single element (1)	
pair<iterator,bool> insert (const value_type& val);
with hint (2)	
iterator insert (iterator position, const value_type& val);
range (3)	
template <class InputIterator>
 void insert (InputIterator first, InputIterator last);
 
(1)	
void erase (iterator position);
(2)	
size_type erase (const value_type& val);
(3)	
void erase (iterator first, iterator last);

bool empty() const;

find
    Get iterator to element (public member function )
count
    Count elements with a specific value (public member function )
    
BIDIRECTIONAL_ITERATOR  multiset<T>::iterator(for multiset)
    
Is default-constructible, copy-constructible, copy-assignable and destructible	X a;
X b(a);
b = a;
Can be compared for equivalence using the equality/inequality operators
(meaningful when both iterator values iterate over the same underlying sequence).	a == b
a != b
Can be dereferenced as an rvalue (if in a dereferenceable state).	*a
a->m
For mutable iterators (non-constant iterators):
Can be dereferenced as an lvalue (if in a dereferenceable state).	*a = t
Can be incremented (if in a dereferenceable state).
The result is either also dereferenceable or a past-the-end iterator.
Two iterators that compare equal, keep comparing equal after being both increased.
++a
a++
*a++
Can be decremented (if a dereferenceable iterator value precedes it).
--a
a--
*a--

Example of use:
// multiset::begin/end
#include <iostream>
#include <set>

int main ()
{
  int myints[] = {42,71,71,71,12};
  std::multiset<int> mymultiset (myints,myints+5);

  std::multiset<int>::iterator it;

  std::cout << "mymultiset contains:";
  for (std::multiset<int>::iterator it=mymultiset.begin(); it!=mymultiset.end(); ++it)
    std::cout << ' ' << *it;

  std::cout << '\n';

  return 0;
}



